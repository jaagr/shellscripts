#!/usr/bin/env bash
#
# Activates specified theme configuration
#   jaagr <c@rlberg.se>
#

source bootstrap.sh

include utils/cli2.sh
include utils/ansi.sh
include utils/log.sh
include utils/log/defer.sh

bootstrap::finish

cli::define_flag -h --help "Print this help text"
cli::define_flag -l --list "List available themes"

declare -r BASE_DIR="$LOCAL_ETC"/themer
declare -r CURRENT_DIR="$BASE_DIR"/current

function main
{
  cli::parse "$@"

  if cli::flag --help; then
    cli::usage "[opts...] theme_name" ; exit
  elif cli::flag --list || [[ $# -eq 0 ]]; then
    local current_theme theme
    current_theme=$(dirname "$(readlink "$CURRENT_DIR"/*)" 2>/dev/null | tail -1 | xargs basename 2>/dev/null)

    log::info "Available themes:"

    for theme in "$BASE_DIR"/themes/*; do
      [[ -d "$theme" ]] || continue

      theme="${theme##*/}"

      if [[ "$theme" == "$current_theme" ]]; then
        log "$theme $(ansi::bold "(in use)")"
      else
        log "$theme"
      fi
    done

    exit
  fi

  local theme_name="$1"
  local theme_dir="${BASE_DIR}/themes/${theme_name}"
  local termite_config="${XDG_CONFIG_HOME}/termite/config"

  [[ "${theme_name}" ]] || {
    log::err "No theme given. Use '--list' to show available themes." ; exit
  }

  [[ -d "${theme_dir}" ]] || {
    log::err "Could not find theme '${theme_name}'. Show available themes with '--list'" ; exit
  }

  log::info "Applying theme $(ansi::bold "${theme_name}")"

  rm -f "${CURRENT_DIR}"/* &>/dev/null

  for file in "${theme_dir}"/*; do
    log::defer "Creating symlink to $(basename "${file}")"

    if ln -sf "${file}" "${CURRENT_DIR}/$(basename "${file}")"; then
      log::defer::success
    else
      log::defer::failure
    fi
  done

  [[ -e "${CURRENT_DIR}/termite" ]] && {
    if [[ -e "${termite_config}" ]]; then
      local termite_tag="themer::placeholder"

      if grep -q "${termite_tag}" "${termite_config}"; then
        log::defer "Creating backup of termite config"

        if ! cp "${termite_config}" "${termite_config}.bak"; then
          log::defer::failure "Failed with status $?" ; exit 1
        fi

        log::defer::success
        log::defer "Removing termite config"

        if ! rm "${termite_config}"; then
          log::defer::failure "Failed with status $?" ; exit 1
        fi

        log::defer::success

        line=$(sed -nr "/\[colors\]/q ; /font/=" "${termite_config}.bak" | tail -1)
        if grep -q "font" "${CURRENT_DIR}/termite" && [[ "${line}" ]] && [[ "$(grep "font" "${CURRENT_DIR}/termite")" != "$(sed -n "${line}p" "${termite_config}.bak")" ]]; then
          tmp=$(mktemp)
          log::info "Adding font to termite configuration"
          {
            sed "${line}q" "${termite_config}.bak"
            grep "font" "${CURRENT_DIR}/termite"
            sed "$((line+1))~1!d" "${termite_config}.bak"
          } > "${tmp}"
          mv "${tmp}" "${termite_config}.bak"
        fi

        log::info "Adding new colors to termite configuration"
        {
          sed "/${termite_tag}/q" "${termite_config}.bak"
          echo "# -- start of script output --"
          egrep -v "\[colors\]|font|^#" "${CURRENT_DIR}/termite"
          echo "# -- end of script output --"
        } >> "${termite_config}"
      else
        log::debug "Could not find placeholder in termite config"
      fi
    else
      log::debug "Could not find termite config file"
    fi
  }

  [[ -e ${CURRENT_DIR}/polybar ]] && [[ -e ${XDG_CONFIG_HOME}/polybar/.runargs ]] && {
    log::info "Removing cached runargs for polybar"
    rm -rf "${XDG_CONFIG_HOME}/polybar/.runargs" &>/dev/null
  }
  [[ -e ${CURRENT_DIR}/compton ]] && {
    log::info "Reloading compton"
    bash "${LOCAL_ETC}/compton/reload" &>/dev/null &
  }
  [[ -e ${CURRENT_DIR}/bspwm ]] && {
    log::info "Reloading bspwm"
    bash "${LOCAL_ETC}/bspwm/reload" &>/dev/null &
  }
  [[ -e ${CURRENT_DIR}/termite ]] && {
    log::info "Reloading termite"
    bash "${LOCAL_ETC}/termite/reload" &>/dev/null &
  }
  [[ -e ${CURRENT_DIR}/dunst ]] && {
    log::info "Reloading dunst"
    bash "${LOCAL_ETC}/dunst/reload" &>/dev/null &
  }
  [[ -e ${CURRENT_DIR}/wallpaper ]] && {
    log::info "Setting wallpaper"
    bash "${CURRENT_DIR}/wallpaper" &>/dev/null &
  }
  [[ -e ${CURRENT_DIR}/xresources ]] && {
    log::info "Applying xrdb overrides"
    xrdb -override "${CURRENT_DIR}/xresources" &>/dev/null &
  }

  log::ok "All done! Enjoy..."
}

main "$@"
